{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fecfa5ca-a865-47ab-8ed3-f4a5de58205a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "addition 47\n",
      "substraction 27\n",
      "multipulication 370\n",
      "division 3.7\n",
      "Floor division 3\n",
      "remindar 7\n",
      "power of exponent 4808584372417849\n"
     ]
    }
   ],
   "source": [
    "x=37\n",
    "y=10\n",
    "print(\"addition\",x+y)\n",
    "print(\"substraction\",x-y)\n",
    "print(\"multipulication\",x*y)\n",
    "print(\"division\",x/y)\n",
    "print(\"Floor division\",x//y)\n",
    "print(\"remindar\",x%y)\n",
    "print(\"power of exponent\",x**y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3de2025d-9585-439a-8fd8-79a6cd8abbe3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "addition 30\n",
      "substraction 10\n",
      "multipulication 200\n",
      "division 2.0\n",
      "Floor division 2\n",
      "remindar 0\n",
      "power of exponent 10240000000000\n"
     ]
    }
   ],
   "source": [
    "x=20\n",
    "y=10\n",
    "print(\"addition\",x+y)\n",
    "print(\"substraction\",x-y)\n",
    "print(\"multipulication\",x*y)\n",
    "print(\"division\",x/y)\n",
    "print(\"Floor division\",x//y)\n",
    "print(\"remindar\",x%y)\n",
    "print(\"power of exponent\",x**y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "492dbdfe-a33a-4023-8e4d-26b20af085c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "addition 50\n",
      "substraction 10\n",
      "multipulication 600\n",
      "division 1.5\n",
      "Floor division 1\n",
      "remindar 10\n",
      "power of exponent 348678440100000000000000000000\n"
     ]
    }
   ],
   "source": [
    "x=30\n",
    "y=20\n",
    "print(\"addition\",x+y)\n",
    "print(\"substraction\",x-y)\n",
    "print(\"multipulication\",x*y)\n",
    "print(\"division\",x/y)\n",
    "print(\"Floor division\",x//y)\n",
    "print(\"remindar\",x%y)\n",
    "print(\"power of exponent\",x**y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2cc09ea6-1342-4c62-aae2-0b0aa55f38cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 20)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7af812e0-502e-4f07-aa59-ca87a7e0b241",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x==y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc08958e-b316-4f64-b6b1-de52c8d0a8ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x>=y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6b62826a-672c-43c3-8611-e6a3226e16d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x<=y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e252ea4d-ac71-4e6f-b45d-e5164a71c9c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x<y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "578a235e-4857-42cd-9a87-be107926fcab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x!=y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6ee656b1-90be-457b-96a2-bd0e80fa2b0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "username=\"mani\"\n",
    "password=6789"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7c4a387e-bc88-4d10-b5de-119cd8b4a1a6",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'username' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m username \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmani\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m (password\u001b[38;5;241m==\u001b[39m\u001b[38;5;241m6789\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'username' is not defined"
     ]
    }
   ],
   "source": [
    "username == \"mani\" and (password==6789)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ec921022-f832-4435-b5fd-debe306b09b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "username=\"admin\"\n",
    "password=12345\n",
    "otp=123"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aa65bffe-2468-42e6-8a79-a7f03bb7467b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "username == \"admin\" and (password==12345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e6aa52b7-b4c6-4d14-82cf-5238d0cfbff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "username == \"admin\" and (password==12345 or otp==1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "54dc6b1d-6b61-4160-9752-f4ed8b52d4d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "username == \"adm\" and (password==12345 or otp==2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b8f571bf-b7aa-4f64-94f0-85e2a88f7b4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your age 19\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ADULT\n"
     ]
    }
   ],
   "source": [
    "age1=eval(input(\"Enter your age\"))\n",
    "if age1>18 and age1<=50:\n",
    "    print(\"ADULT\")\n",
    "elif age1<=18 and age1>12:\n",
    "    print(\"YOUNG\")\n",
    "elif age<=12 and age1<0:\n",
    "    print(\"CHILD\")\n",
    "else:\n",
    "        print(\"Enter correct age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "14df79e0-7176-4dd8-8aa3-439cef76668c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a value 8\n",
      "Enter b value 4\n",
      "Enter c value 7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a is greater number\n"
     ]
    }
   ],
   "source": [
    "a=eval(input(\"Enter a value\"))\n",
    "b=eval(input(\"Enter b value\"))\n",
    "c=eval(input(\"Enter c value\"))\n",
    "if a>b and b<=c:\n",
    "    print(\"a is greater number\")\n",
    "elif b>=c and c<=a:\n",
    "    print(\"b is greater number\")\n",
    "else:\n",
    "    print(\"c is greater number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0003f57e-b410-46a1-bd80-26c648eb60a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "an even number\n"
     ]
    }
   ],
   "source": [
    "a=eval(input(\"Enter a number\"))\n",
    "if a*2:\n",
    "    print(\"an even number\")\n",
    "elif a*1:\n",
    "    print(\"an odd number\")\n",
    "else:\n",
    "    print(\"Invalid number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "995ef5de-e239-4f14-bcc9-16e81eff774c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "l=[1,2,3,4,5]\n",
    "for i in l:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fd82e2bf-9704-4a07-b5eb-b5f25d9e9963",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after 'if' statement on line 3 (2891457297.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[19], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(i)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after 'if' statement on line 3\n"
     ]
    }
   ],
   "source": [
    "def func():\n",
    "    for i in range(10):\n",
    "        if i%2==0:\n",
    "        print(i)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base]",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
